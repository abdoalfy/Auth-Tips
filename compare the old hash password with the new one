<?php 

namespace App\Modules\Auth\app\Logic;

use App\Interfaces\LifeCycleInterface;
use App\Traits\LifeCycle;
use Illuminate\Support\Facades\Hash;

class UpdatePasswordLogic implements LifeCycleInterface
{
    use LifeCycle;
    private static $admin;

    /**
     * ## Checks if the old password provided by the user is correct.
     */
    public static function checkPassword()
    {
        if (self::hasErrors()) return self::next();
        $request = self::$request;

        self::$admin = auth()->user();
        if (!Hash::check($request->old_password, self::$admin->password)) {
            self::setError(["message" => "Old Password Is Incorrect."]);

        }

        return new self;
    }


    /**
     * ## Updates the user's password if there are no existing errors.
     */
    public static function update()
    {
        if (self::hasErrors()) return self::next();
        $request = self::$request;

        self::$admin->password = Hash::make($request->password);
        self::$admin->save();

        return new self;
    }


    /**
     * ## Returns a success or error response based on whether any errors were set during the process.
     */
    public static function response()
    {
        if (self::hasErrors()) {
            return responseError(__("Update Password"), self::getErrors());
        }

        return responseSuccess(__("Update Password"), ['message' => __("Admin Password Updated Successfully")]);
    }
}
